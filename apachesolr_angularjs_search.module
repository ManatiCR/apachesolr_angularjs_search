<?php

/**
 * @file
 * Main code file for apachesolr_angularjs_search module.
 */

define('APACHESOLR_ANGULARJS_SEARCH_PERMANENT', 1);
define('APACHESOLR_ANGULARJS_SEARCH_TEMPORARY', 0);
define('APACHESOLR_ANGULARJS_SEARCH_BASE_PATH', 'apachesolr-angularjs-search');

/**
 * Implements hook_help().
 */
function apachesolr_angularjs_search_help($path, $arg) {
  switch ($path) {
    case 'admin/help/#apachesolr_angularjs_search':
      return 'Provides 2 blocks (one for simple and another for advanced) for searches using angularjs in frontend and apachesolr as search backend.';
  }
}

/**
 * Implements hook_menu().
 */
function apachesolr_angularjs_search_menu() {
  return array(
    APACHESOLR_ANGULARJS_SEARCH_BASE_PATH => array(
      'title' => 'Search',
      'page callback' => 'apachesolr_angularjs_search_process_query',
      'access callback' => TRUE,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function apachesolr_angularjs_search_block_info() {
  return array(
    'aas_basic' => array(
      'info' => t('Apachesolr AngularJS Basic Search'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'aas_advanced' => array(
      'info' => t('Apachesolr AngularJS Advanced Search'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
  );
}

/**
 * Implements hook_block_configure().
 */
function apachesolr_angularjs_search_block_configure($delta) {
  $environment_options = array();

  $pages = apachesolr_search_load_all_search_pages();

  foreach ($pages as $page_id => $page) {
    if ($page['env_id']) {
      $page_options[$page_id] = $page['label'];
    }
  }

  $default_page = apachesolr_search_default_search_page();
  $entity_type = 'node';

  if ($delta == 'aas_basic') {
    $form['apachesolr_angularjs_search_basic_page'] = array(
      '#title' => t('Page'),
      '#type' => 'select',
      '#options' => $page_options,
      '#default_value' => variable_get('apachesolr_angularjs_search_basic_page', $default_page),
      '#required' => TRUE,
    );
    return $form;
  }
  elseif ($delta == 'aas_advanced') {
    // @TODO Remove and fix ajax.
    $form['notice'] = array(
      '#markup' => t('If you change page; please save and go here again for selecting fields.'),
    );
    $form['apachesolr_angularjs_search_advanced_page'] = array(
      '#title' => t('Page'),
      '#type' => 'select',
      '#options' => $page_options,
      '#ajax' => array(
        'callback' => 'apachesolr_angularjs_search_get_fields_element',
        'method' => 'replace',
        'wrapper' => 'aas-advanced-fields',
      ),
      '#default_value' => variable_get('apachesolr_angularjs_search_advanced_page', $default_page),
      '#required' => TRUE,
    );

    $form['apachesolr_angularjs_search_advanced_fields'] = array(
      '#title' => t('Allowed Fields'),
      '#type' => 'checkboxes',
      '#options' => apachesolr_angularjs_search_get_fields_options(),
      '#default_value' => apachesolr_angular_js_search_fields_default_value(variable_get('apachesolr_angularjs_search_advanced_fields', array())),
      '#prefix' => '<div id="aas-advanced-fields">',
      '#suffix' => '</div>',
    );
    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function apachesolr_angularjs_search_block_save($delta, $edit) {
  if ($delta == 'aas_basic') {
    variable_set('apachesolr_angularjs_search_basic_page', $edit['apachesolr_angularjs_search_basic_page']);
  }
  elseif ($delta == 'aas_advanced') {
    $page_id = $edit['apachesolr_angularjs_search_advanced_page'];
    variable_set('apachesolr_angularjs_search_advanced_page', $page_id);
    $page = apachesolr_search_page_load($page_id);
    $environment = $page['env_id'];
    $environment_fields = apachesolr_angularjs_search_get_environment_fields($environment);
    $fields = array();
    foreach ($edit['apachesolr_angularjs_search_advanced_fields'] as $field_name => $value) {
      if (!empty($value)) {
        $type = $environment_fields[$field_name]->type;
        if (strpos($type, 'text') === 0) {
          $type = 'string';
        }
        elseif ($type == 'long' || $type == 'numeric') {
          $type = 'numeric';
        }

        $fields[$field_name] = array(
          'label' => apachesolr_field_name_map($field_name),
          'type' => $type,
        );
      }
    }
    variable_set('apachesolr_angularjs_search_advanced_fields', $fields);
  }
}

/**
 * Implements hook_block_view().
 */
function apachesolr_angularjs_search_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'aas_basic':
      $block['subject'] = t('Basic Search');
      $block['content'] = apachesolr_angularjs_search_get_basic_search_block();
      break;

    case 'aas_advanced':
      $block['subject'] = t('Advanced Search');
      $block['content'] = apachesolr_angularjs_search_get_advanced_search_block();
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function apachesolr_angularjs_search_theme() {
  return array(
    'apachesolr_angularjs_advanced_search' => array(
      'template' => 'apachesolr-angularjs-advanced-search',
      'path' => drupal_get_path('module', 'apachesolr_angularjs_search') . '/templates/',
    ),
  );
}

/**
 * Returns default value for fields field.
 */
function apachesolr_angular_js_search_fields_default_value($fields) {
  foreach ($fields as $field_name => $field) {
    $fields[$field_name] = $field_name;
  }
  return $fields;
}

/**
 * Returns fields element for block configure form.
 */
function apachesolr_angularjs_search_get_fields_element($form, $form_state) {
  $page_id = $form_state['values']['apachesolr_angularjs_search_advanced_page'];
  $page = apachesolr_search_page_load($page_id);
  $environment = $page['env_id'];
  $form['settings']['apachesolr_angularjs_search_advanced_fields']['#options'] = apachesolr_angularjs_search_get_fields_options($environment);
  return drupal_render($form['settings']['apachesolr_angularjs_search_advanced_fields']);
}

/**
 * Returns fields options based on actual solr environment.
 */
function apachesolr_angularjs_search_get_fields_options($page_id = '') {
  if (!$page_id) {
    $page_id = variable_get('apachesolr_angularjs_search_advanced_page', apachesolr_search_default_search_page());
    $page = apachesolr_search_page_load($page_id);
    $env_id = $page['env_id'];
  }
  $fields = apachesolr_angularjs_search_get_environment_fields($env_id);
  $options = array();

  foreach ($fields as $field_name => $field) {
    $options[$field_name] = apachesolr_field_name_map($field_name);
  }
  // @TODO: Check hook_apachesolr_field_name_map_alter

  return $options;
}

/**
 * Returns fields array for a given environment.
 *
 * This function uses static cache.
 */
function apachesolr_angularjs_search_get_environment_fields($env_id) {
  $fields = &drupal_static(__FUNCTION__ . '_' . $env_id);
  if (!$fields) {
    $environment = apachesolr_environment_load($env_id);
    module_load_include('inc', 'apachesolr_search', 'apachesolr_search.admin');
    $fields = apachesolr_search_get_fields($environment);
    $fields = get_object_vars($fields);
  }
  return $fields;
}

/**
 * Return a rendereable array for basic search block.
 */
function apachesolr_angularjs_search_get_basic_search_block() {
  return array();
}

/**
 * Return a rendereable array for advanced search block.
 */
function apachesolr_angularjs_search_get_advanced_search_block() {
  $fields = variable_get('apachesolr_angularjs_search_advanced_fields', array());
  $page_id = variable_get('apachesolr_angularjs_search_advanced_page', apachesolr_search_default_search_page());
  $fields['__fulltext_search'] = array(
    'label' => t('All Fields'),
    'type' => 'fulltext',
  );
  drupal_alter('apachesolr_angularjs_search_fields', $fields);
  $settings = array(
    'fields' => $fields,
    'page_id' => $page_id,
  );
  $path = drupal_get_path('module', 'apachesolr_angularjs_search');

  $build = array(
    '#markup' => theme('apachesolr_angularjs_advanced_search'),
    '#attached' => array(
      'js' => array(
        0 => array(
          'data' => array('apachesolrAngularjs' => $settings),
          'type' => 'setting',
        ),
        // @TODO: change by minified files.
        $path . '/bower_components/angular/angular.js' => array(
          'type' => 'file',
        ),
        $path . '/bower_components/angular-cookies/angular-cookies.js' => array(
          'type' => 'file',
        ),
        $path . '/bower_components/angular-resource/angular-resource.js' => array(
          'type' => 'file',
        ),
        $path . '/bower_components/angular-sanitize/angular-sanitize.js' => array(
          'type' => 'file',
        ),
        $path . '/bower_components/angular-touch/angular-touch.js' => array(
          'type' => 'file',
        ),
        $path . '/src-js/app.js' => array(
          'type' => 'file',
        ),
      ),
    ),
  );
  return $build;
}

/**
 * Process search query string.
 */
function apachesolr_angularjs_search_process_query($uri = '') {
  global $user;
  $query = '';
  $save_option = FALSE;
  if (empty($uri)) {
    $query = !empty($_POST['query']) ? check_plain($_POST['query']) : '';
    $page_id = !empty($_POST['pageId']) ? check_plain($_POST['pageId']) : '';
    if ($user->uid && $query && $page_id) {
      $search = new stdClass();
      $search->page_id = $page_id;
      $search->query = $query;
      apachesolr_angularjs_search_save_temporary_search($search);
      $save_option = TRUE;

      // Need to set this for making the pager works.
      $_GET['q'] = APACHESOLR_ANGULARJS_SEARCH_BASE_PATH . '/' . $search->uri;
    }
  }
  elseif ($search = apachesolr_angularjs_search_valid_uri_and_user($uri, $user)) {
    $query = $search->query;
    $page_id = $search->page_id;
  }
  else {
    // Not valid uri. Search with given string.
    $query = $uri;
  }

  if (empty($page_id)) {
    $page_id = variable_get('apachesolr_angularjs_search_advanced_page', apachesolr_search_default_search_page());
  }

  $conditions = array(
    'fq' => array(),
    'apachesolr_search_sort' => '',
  );
  $page = apachesolr_search_page_load($page_id);;
  $build = array();
  $results = apachesolr_search_search_results($query, $conditions, $page);
  $build = apachesolr_search_search_page_custom($results, $page, $build);
  if (isset($build['suggestions'])) {
    // Remove suggestions.
    unset($build['suggestions']);
  }

  if ($save_option) {
    $build['save_form'] = drupal_get_form('apachesolr_angularjs_search_save_form', $search);
    $build['save_form']['#weight'] = 0;
  }

  return $build;
}

/**
 * Returns save form for a given search.
 */
function apachesolr_angularjs_search_save_form($form, $form_state, $search) {
  $form['search'] = array(
    '#type' => 'value',
    '#value' => $search,
  );

  $form['help'] = array(
    '#type' => 'markup',
    '#markup' => t('Set a name and click save if you want to save this view.'),
    '#weight' => 0,
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#weight' => 1,
  );

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 2,
    '#ajax' => array(
      'callback' => 'apachesolr_angularjs_search_save_search',
      'method' => 'replace',
      'effect' => 'fade',
      'wrapper' => 'apachesolr-angularjs-search-save-form',
    ),
  );

  return $form;
}

/**
 * Save Search and return success text.
 */
function apachesolr_angularjs_search_save_search($form, $form_state) {
  $values = $form_state['values'];
  $name = $values['name'];
  $search = $values['search'];
  $search->name = $name;
  $search->status = APACHESOLR_ANGULARJS_SEARCH_PERMANENT;
  $result = drupal_write_record('apachesolr_angularjs_search_saved', $search, 'sid');
  if ($result === SAVED_UPDATED) {
    global $base_url;
    return t('Your search has been saved. You could go to !link for using it.',
      array(
        '!link' => l($base_url . '/' . APACHESOLR_ANGULARJS_SEARCH_BASE_PATH . '/' . $search->uri, APACHESOLR_ANGULARJS_SEARCH_BASE_PATH . '/' . $search->uri)));
  }
  else {
    return t('There was an error saving your search.');
  }
}

/**
 * Returns a search for a given uri and account or FALSE if doesn't exist.
 */
function apachesolr_angularjs_search_valid_uri_and_user($uri, $account = 0) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  $query = db_query('SELECT sid, uri, name, created, uid, page_id, status, query FROM apachesolr_angularjs_search_saved WHERE uid = :uid AND uri = :uri', array(':uid' => $account->uid, ':uri' => $uri));
  $search = $query->fetchObject();
  if ($search) {
    return $search;
  }

  return FALSE;
}

/**
 * Save temporary search.
 */
function apachesolr_angularjs_search_save_temporary_search(&$search) {
  if (empty($search->uid)) {
    global $user;
    $search->uid = $user->uid;
  }
  if (empty($search->created)) {
    $search->created = REQUEST_TIME;
  }
  if (empty($search->uri)) {
    $search->uri = apachesolr_angularjs_search_get_search_uri($search);
  }
  return drupal_write_record('apachesolr_angularjs_search_saved', $search);
}

/**
 * Return search uri for a given search.
 */
function apachesolr_angularjs_search_get_search_uri($search, $count = 0) {
  global $drupal_hash_salt;
  $string = $search->uid . '|' . $search->created . '|' . $search->query . '|' . $count;
  $uri = drupal_hmac_base64($string, $drupal_hash_salt);
  // Remove -- because of unexpected results.
  $uri = str_replace('--', '', $uri);

  $uri = substr($uri, 0, 20);
  if (apachesolr_angular_js_search_uri_exists($uri)) {
    return apachesolr_angularjs_search_get_search_uri($search, $count + 1);
  }
  else {
    return $uri;
  }
}

/**
 * Returns whether a given uri already exists or not in saved searches table.
 */
function apachesolr_angular_js_search_uri_exists($uri) {
  $query = db_query('SELECT count(sid) FROM apachesolr_angularjs_search_saved WHERE uri = :uri', array(':uri' => $uri));
  $count = $query->fetchField();
  if ($count) {
    return TRUE;
  }
  return FALSE;
}
