<?php

/**
 * @file
 * Main code file for apachesolr_angularjs_search module.
 */

define('APACHESOLR_ANGULARJS_SEARCH_PERMANENT', 1);
define('APACHESOLR_ANGULARJS_SEARCH_TEMPORARY', 0);
define('APACHESOLR_ANGULARJS_SEARCH_BASE_PATH', 'apachesolr-angularjs-search');

/**
 * Implements hook_help().
 */
function apachesolr_angularjs_search_help($path, $arg) {
  switch ($path) {
    case 'admin/help/#apachesolr_angularjs_search':
      return t('Provides 2 blocks (one for simple and another for advanced) for searches using angularjs in frontend and apachesolr as search backend.');

    case 'admin/config/search/apachesolr-angularjs-search':
      return t('Set variables according to your preferences for apachesolr angularjs search module.');
  }
}

/**
 * Implements hook_entity_info().
 */
function apachesolr_angularjs_search_entity_info() {
  return array(
    'aas_search_saved' => array(
      'label' => t('Saved Search'),
      'base table' => 'aas_search_saved',
      'entity keys' => array(
        'id' => 'sid',
      ),
    ),
    'aas_search_saved_groups' => array(
      'label' => t('Saved Search Group'),
      'base table' => 'aas_search_saved_groups',
      'entity keys' => array(
        'id' => 'sgid',
      ),
    ),
  );
}

/**
 * Implements hook_action_info().
 */
function apachesolr_angularjs_search_action_info() {
  return array(
    'apachesolr_angularjs_search_delete_search' => array(
      'type' => 'aas_search_saved',
      'label' => t('Clear History'),
      'configurable' => FALSE,
      'behavior' => array(
        'deletes_property',
      ),
    ),
    'apachesolr_angularjs_search_delete_search_group' => array(
      'type' => 'aas_search_saved_groups',
      'label' => t('Clear History'),
      'configurable' => FALSE,
      'behavior' => array(
        'deletes_property',
      ),
    ),
  );
}

/**
 * Delete a given search.
 */
function apachesolr_angularjs_search_delete_search($entity, $context = array()) {
  db_delete('aas_search_saved')
    ->condition('sid', $entity->sid)
    ->execute();
}

/**
 * Delete a given search group.
 */
function apachesolr_angularjs_search_delete_search_group($entity, $context = array()) {
  db_delete('aas_search_saved_groups')
    ->condition('sgid', $entity->sgid)
    ->execute();
}

/**
 * Implements hook_menu().
 */
function apachesolr_angularjs_search_menu() {
  return array(
    APACHESOLR_ANGULARJS_SEARCH_BASE_PATH => array(
      'title' => '',
      'page callback' => 'apachesolr_angularjs_search_process_query',
      'access callback' => TRUE,
    ),
    APACHESOLR_ANGULARJS_SEARCH_BASE_PATH . '/search-group' => array(
      'title' => 'Save Search Group',
      'page callback' => 'apachesolr_angularjs_search_save_group',
      'access callback' => TRUE,
    ),
    'admin/config/search/apachesolr-angularjs-search' => array(
      'title' => 'Administer settings for apachesolr angularjs search',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('apachesolr_angularjs_search_admin_form'),
      'access arguments' => array('administer settings for apachesolr angularjs search'),
    ),
    'apachesolr_angularjs_search/add_block/%' => array(
      'title' => '',
      'page callback' => 'apachesolr_angularjs_search_add_block',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function apachesolr_angularjs_search_permission() {
  return array(
    'administer settings for apachesolr angularjs search' => array(
      'title' => t('Administer settings for apachesolr angularjs search'),
      'description' => t('Set some variables for this module'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function apachesolr_angularjs_search_block_info() {
  return array(
    'aas_basic' => array(
      'info' => t('Apachesolr AngularJS Basic Search'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'aas_advanced' => array(
      'info' => t('Apachesolr AngularJS Advanced Search'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'aas_help_tips' => array(
      'info' => t('Apachesolr AngularJS Advanced Search Help Tips'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
  );
}

/**
 * Implements hook_block_configure().
 */
function apachesolr_angularjs_search_block_configure($delta) {
  $environment_options = array();

  $pages = apachesolr_search_load_all_search_pages();

  foreach ($pages as $page_id => $page) {
    if ($page['env_id']) {
      $page_options[$page_id] = $page['label'];
    }
  }

  $default_page = apachesolr_search_default_search_page();
  $entity_type = 'node';

  if ($delta == 'aas_advanced') {
    // @TODO Remove and fix ajax.
    $form['notice'] = array(
      '#markup' => t('If you change page; please save and go here again for selecting fields.'),
    );
    $form['apachesolr_angularjs_search_advanced_page'] = array(
      '#title' => t('Page'),
      '#type' => 'select',
      '#options' => $page_options,
      '#ajax' => array(
        'callback' => 'apachesolr_angularjs_search_get_fields_element',
        'method' => 'replace',
        'wrapper' => 'aas-advanced-fields',
      ),
      '#default_value' => variable_get('apachesolr_angularjs_search_advanced_page', $default_page),
      '#required' => TRUE,
    );

    $form['apachesolr_angularjs_search_advanced_fields'] = array(
      '#title' => t('Allowed Fields'),
      '#type' => 'sortable_lists',
      '#columns' => array(
        'choices' => t('Choices'),
        'selected' => t('Selected'),
        'limitby' => t('Limit By'),
      ),
      '#options' => apachesolr_angularjs_search_get_fields_options(),
      '#default_value' => apachesolr_angular_js_search_fields_default_value(variable_get('apachesolr_angularjs_search_advanced_fields', array()), apachesolr_angularjs_search_get_fields_options()),
      '#prefix' => '<div id="aas-advanced-fields">',
      '#suffix' => '</div>',
    );
    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function apachesolr_angularjs_search_block_save($delta, $edit) {
  if ($delta == 'aas_advanced') {
    $page_id = $edit['apachesolr_angularjs_search_advanced_page'];
    variable_set('apachesolr_angularjs_search_advanced_page', $page_id);
    $page = apachesolr_search_page_load($page_id);
    $environment = $page['env_id'];
    $environment_fields = apachesolr_angularjs_search_get_environment_fields($environment);
    foreach ($edit['apachesolr_angularjs_search_advanced_fields']['sortable_lists'] as $column => &$fields) {
      if ($column === 'selected') {
        foreach ($fields as $field_name => &$value) {
          if (!empty($value)) {
            $type = $environment_fields[$field_name]->type;
            if (strpos($type, 'text') === 0) {
              $type = 'string';
            }
            elseif ($type == 'long' || $type == 'numeric') {
              $type = 'numeric';
            }

            $value = array(
              'id' => $field_name,
              'label' => apachesolr_field_name_map($field_name),
              'type' => $type,
            );
          }
        }
      }
    }
    variable_set('apachesolr_angularjs_search_advanced_fields', $edit['apachesolr_angularjs_search_advanced_fields']);
  }
}

/**
 * Implements hook_block_view().
 */
function apachesolr_angularjs_search_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'aas_basic':
      $block['subject'] = '';
      $block['content'] = apachesolr_angularjs_search_get_basic_search_block();
      break;

    case 'aas_advanced':
      $block['subject'] = t('Advanced Search');
      $block['content'] = apachesolr_angularjs_search_get_advanced_search_block();
      break;

    case 'aas_help_tips':
      $block['subject'] = t('Help Tips');
      $block['content'] = apachesolr_angularjs_search_get_help_tips_block();
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function apachesolr_angularjs_search_theme() {
  return array(
    'apachesolr_angularjs_advanced_search' => array(
      'template' => 'apachesolr-angularjs-advanced-search',
      'path' => drupal_get_path('module', 'apachesolr_angularjs_search') . '/templates/',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function apachesolr_angularjs_search_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_cron().
 */
function apachesolr_angularjs_search_cron() {
  // Get Delete time. Default to 1 day: 86400
  $delete_time = variable_get('apachesolr_angularjs_search_delete_time', 86400);
  $search_ids = apachesolr_angularjs_search_get_expired_searches($delete_time);
  if (!empty($search_ids)) {
    db_delete('aas_search_saved')
      ->condition('sid', $search_ids, 'IN')
      ->execute();
  }
}

/**
 * Implements hook_preprocess_apachesolr_sort_link().
 */
function apachesolr_angularjs_search_preprocess_apachesolr_sort_link(&$vars) {
  _apachesolr_angularjs_search_preprocess_filter_sort_link($vars);
}

/**
 * Implements hook_preprocess_facetapi_link_inactive().
 */
function apachesolr_angularjs_search_preprocess_facetapi_link_inactive(&$vars) {
  _apachesolr_angularjs_search_preprocess_filter_sort_link($vars);
}

/**
 * Implements hook_preprocess_facetapi_link_active().
 */
function apachesolr_angularjs_search_preprocess_facetapi_link_active(&$vars) {
  _apachesolr_angularjs_search_preprocess_filter_sort_link($vars);
}

/**
 * Implements hook_query_TAG_alter().
 */
function apachesolr_angularjs_search_query_aas_search_saved_access_alter(QueryAlterableInterface $query) {
  if (user_is_anonymous()) {
    // We need to have a value in session for getting session saved.
    $_SESSION['save'] = TRUE;
    $session_id = session_id();
    $tables = $query->getTables();
    $aas_search_saved_table_alias = '';
    foreach ($tables as $alias => $table_info) {
      if ($table_info['table'] === 'aas_search_saved') {
        $aas_search_saved_table_alias = $alias;
        break;
      }
    }
    if ($aas_search_saved_table_alias) {
      $query->condition($aas_search_saved_table_alias . '.session_id', $session_id, '=');
    }
  }
}

/**
 * Page callback for save search group.
 */
function apachesolr_angularjs_search_add_block($group_id) {
  $group = apachesolr_angularjs_search_group_load($group_id);
  if ($group) {
    $data = unserialize($group->data);
    echo drupal_json_encode($data);
  }
  else {
    echo 0;
  }
}

/**
 * Preprocess facetapi_link.
 */
function _apachesolr_angularjs_search_preprocess_filter_sort_link(&$vars) {
  if (drupal_match_path(current_path(), APACHESOLR_ANGULARJS_SEARCH_BASE_PATH . "/*\n" . APACHESOLR_ANGULARJS_SEARCH_BASE_PATH)) {
    $vars['path'] = current_path();
  }
}

/**
 * Return sid for expired searches.
 *
 * A search is considered expired if created + $delete_time > REQUEST_TIME.
 *
 * @param int $delete_time
 *   The time in seconds that a temporary search should live.
 */
function apachesolr_angularjs_search_get_expired_searches($delete_time) {
  $created = REQUEST_TIME - $delete_time;
  $search_ids = db_query('SELECT sid FROM {aas_search_saved} WHERE status = :status AND created < :created', array(':status' => APACHESOLR_ANGULARJS_SEARCH_TEMPORARY, ':created' => $created))->fetchCol();
  return $search_ids;
}

/**
 * Returns default value for fields field.
 */
function apachesolr_angular_js_search_fields_default_value($fields, $options) {
  if (!empty($fields)) {
    foreach ($fields['sortable_lists']['selected'] as $field_name => $field) {
      $fields['sortable_lists']['selected'][$field_name] = $field_name;
    }
  }
  $fields['sortable_lists']['choices'] = array_diff($options, $fields['sortable_lists']['selected']);
  return $fields;
}

/**
 * Returns fields element for block configure form.
 */
function apachesolr_angularjs_search_get_fields_element($form, $form_state) {
  $page_id = $form_state['values']['apachesolr_angularjs_search_advanced_page'];
  $page = apachesolr_search_page_load($page_id);
  $environment = $page['env_id'];
  $form['settings']['apachesolr_angularjs_search_advanced_fields']['#options'] = apachesolr_angularjs_search_get_fields_options($environment);
  return drupal_render($form['settings']['apachesolr_angularjs_search_advanced_fields']);
}

/**
 * Returns fields options based on actual solr environment.
 */
function apachesolr_angularjs_search_get_fields_options($page_id = '') {
  if (!$page_id) {
    $page_id = variable_get('apachesolr_angularjs_search_advanced_page', apachesolr_search_default_search_page());
    $page = apachesolr_search_page_load($page_id);
    $env_id = $page['env_id'];
  }
  $fields = apachesolr_angularjs_search_get_environment_fields($env_id);
  $options = array();

  foreach ($fields as $field_name => $field) {
    $options[$field_name] = apachesolr_field_name_map($field_name);
  }
  // @TODO: Check hook_apachesolr_field_name_map_alter

  return $options;
}

/**
 * Returns fields array for a given environment.
 *
 * This function uses static cache.
 */
function apachesolr_angularjs_search_get_environment_fields($env_id) {
  $fields = &drupal_static(__FUNCTION__ . '_' . $env_id);
  if (!$fields) {
    $environment = apachesolr_environment_load($env_id);
    module_load_include('inc', 'apachesolr_search', 'apachesolr_search.admin');
    $fields = apachesolr_search_get_fields($environment);
    $fields = get_object_vars($fields);
  }
  return $fields;
}

/**
 * Return a rendereable array for basic search block.
 */
function apachesolr_angularjs_search_get_basic_search_block() {
  $form = drupal_get_form('apachesolr_angularjs_search_basic_form');
  return $form;
}

/**
 * Returns basic search form.
 */
function apachesolr_angularjs_search_basic_form($form, $form_state) {
  $form['#prefix'] = '<div class="aas-basic-form">';
  $form['#suffix'] = '</div>';
  $form['search_terms'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#size' => 15,
    '#default_value' => '',
    '#attributes' => array(
      'title' => t('Enter the terms you wish to search for.'),
      'class' => array('aas-basic-form--search-terms'),
    ),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#attributes' => array(
      'class' => array('aas-basic-form--submit-button'),
    ),
  );

  return $form;
}

/**
 * Submit handler for basic search form.
 */
function apachesolr_angularjs_search_basic_form_submit($form, &$form_state) {
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }
  $form_state['redirect'] = APACHESOLR_ANGULARJS_SEARCH_BASE_PATH . '/' . trim($form_state['values']['search_terms']);
}

/**
 * Return build array for help tips block.
 */
function apachesolr_angularjs_search_get_help_tips_block() {
  $build = array();
  $help_tips = variable_get('apachesolr_angularjs_search_help_tips', array());
  if (!empty($help_tips)) {
    $content = check_markup($help_tips['value'], $help_tips['format']);
    $build['content'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="aas-help-tips-block">' . $content . '</div>',
    );
  }
  return $build;
}

/**
 * Return a rendereable array for advanced search block.
 */
function apachesolr_angularjs_search_get_advanced_search_block() {
  $advanced_fields = variable_get('apachesolr_angularjs_search_advanced_fields', array());
  $fulltext_field = array(
    '__fulltext_search' => array(
      'id' => '__fulltext_search',
      'label' => t('All Fields'),
      'type' => 'fulltext',
    ),
  );
  $fields['selected'] = !empty($advanced_fields['sortable_lists']['selected']) ? array_values($fulltext_field + $advanced_fields['sortable_lists']['selected']) : array_values($fulltext_field);
  $fields['limitby'] = !empty($advanced_fields['sortable_lists']['limitby']) ? array_values($advanced_fields['sortable_lists']['limitby']) : array();
  $page_id = variable_get('apachesolr_angularjs_search_advanced_page', apachesolr_search_default_search_page());
  $fields['always'] = array_values($fulltext_field);
  drupal_alter('apachesolr_angularjs_search_fields', $fields);
  $settings = array(
    'fields' => $fields,
    'pageId' => $page_id,
    'modulePath' => drupal_get_path('module', 'apachesolr_angularjs_search'),
  );

  if (!empty($_GET['group_id']) && is_numeric($_GET['group_id'])) {
    $group_id = $_GET['group_id'];
    $group = apachesolr_angularjs_search_group_load($group_id);
    if ($group) {
      $data = unserialize($group->data);
      $data->processingSave = FALSE;
      $settings['groups'][] = $data;
    }
  }

  $path = drupal_get_path('module', 'apachesolr_angularjs_search');

  $build = array(
    '#markup' => theme('apachesolr_angularjs_advanced_search'),
    '#attached' => array(
      'js' => array(
        0 => array(
          'data' => array('apachesolrAngularjs' => $settings),
          'type' => 'setting',
        ),
        // @TODO: change by minified files.
        $path . '/bower_components/angular/angular.js' => array(
          'type' => 'file',
        ),
        $path . '/bower_components/angular-cookies/angular-cookies.js' => array(
          'type' => 'file',
        ),
        $path . '/bower_components/angular-resource/angular-resource.js' => array(
          'type' => 'file',
        ),
        $path . '/bower_components/angular-sanitize/angular-sanitize.js' => array(
          'type' => 'file',
        ),
        $path . '/bower_components/angular-touch/angular-touch.js' => array(
          'type' => 'file',
        ),
        $path . '/bower_components/angular-ui-select/dist/select.min.js' => array(
          'type' => 'file',
        ),
        $path . '/bower_components/jquery-highlighttextarea/jquery.highlighttextarea.min.js' => array(
          'type' => 'file',
        ),
        $path . '/src-js/app/app.module.js' => array(
          'type' => 'file',
        ),
        $path . '/src-js/app/main/main.controller.js' => array(
          'type' => 'file',
        ),
        $path . '/src-js/components/drupalData/drupalData.service.js' => array(
          'type' => 'file',
        ),
        $path . '/src-js/components/searchPost/searchPost.service.js' => array(
          'type' => 'file',
        ),
        $path . '/src-js/components/searchGroup/searchGroup.service.js' => array(
          'type' => 'file',
        ),
        $path . '/src-js/components/booleansPopup/booleansPopup.directive.js' => array(
          'type' => 'file',
        ),
        $path . '/src-js/components/booleansSelect/booleansSelect.directive.js' => array(
          'type' => 'file',
        ),
      ),
      'css' => array(
        $path . '/bower_components/angular-ui-select/dist/select.min.css' => array(
          'type' => 'file',
        ),
        $path . '/bower_components/jquery-highlighttextarea/jquery.highlighttextarea.min.css' => array(
          'type' => 'file',
        ),
        $path . '/src-js/app/app.css' => array(
          'type' => 'file',
        ),
      ),
    ),
  );
  return $build;
}

/**
 * Save search group callback.
 */
function apachesolr_angularjs_search_save_group() {
  $data = file_get_contents('php://input');
  $data = drupal_json_decode($data);
  $group = new stdClass();
  $group->data = (object) $data['group'];

  if (empty($group->uid)) {
    global $user;
    $group->uid = $user->uid;
  }
  if (empty($group->created)) {
    $group->created = REQUEST_TIME;
  }
  if (empty($group->last_used)) {
    $group->last_used = REQUEST_TIME;
  }
  if (empty($group->name)) {
    $group->name = !empty($group->data->name) ? $group->data->name : apachesolr_angularjs_search_get_group_name($group->data);
  }
  $save_result = drupal_write_record('aas_search_saved_groups', $group);
  $result = new stdClass();
  if ($save_result === SAVED_NEW) {
    $result->status = 200;
    $result->message = t('Success');
  }
  else {
    $result->status = 500;
    $result->message = t('There was an error');
  }
  return drupal_json_output($result);
}

/**
 * Create and return a name for a given search.
 */
function apachesolr_angularjs_search_get_search_name($groups) {
  $name = '';
  foreach ($groups as $group) {
    $name .= apachesolr_angularjs_search_get_group_name($group);
    $name .= '. ';
  }
  $name = substr($name, 0, -2);
  $name = truncate_utf8($name, 255, FALSE, TRUE);
  return $name;
}

/**
 * Create and return a name for a given search group.
 */
function apachesolr_angularjs_search_get_group_name($group) {
  $name = '';
  if (is_array($group)) {
    $group = (object) $group;
  }
  foreach ($group->fields as $field) {
    if (!empty($field['id']) && !empty($field['value'])) {
      if (!empty($field['autocompletePath'])) {
        $value = apachesolr_angularjs_search_get_autocomplete_field_values($field['value']);
      }
      else {
        $value = apachesolr_angularjs_search_get_field_values($field['value']);
      }
      $value = is_array($value) ? $value[0] : $field['value'];
      $name .= $field['label'] . ': ' . $value . '; ';
    }
  }
  $name = substr($name, 0, -2);
  $name = truncate_utf8($name, 255, FALSE, TRUE);
  return $name;
}

/**
 * Process search query string.
 */
function apachesolr_angularjs_search_process_query($uri = '') {
  global $user;
  $query = '';
  $save_option = &drupal_static('apachesolr_angularjs_search_process_query_save_option', FALSE);
  if (empty($uri)) {
    $data = file_get_contents('php://input');
    $data = drupal_json_decode($data);
    $groups = !empty($data['groups']) ? $data['groups'] : array();
    $limit_by = !empty($data['limitBy']) ? $data['limitBy'] : array();
    $page_id = !empty($data['pageId']) ? check_plain($data['pageId']) : '';
    if ($groups && $page_id) {
      $search = new stdClass();
      $search->page_id = $page_id;
      $query = apachesolr_angularjs_search_build_query($groups, $limit_by);
      $search->groups = $groups;
      $search->query = $query;
      $search->limit_by = $limit_by;
      apachesolr_angularjs_search_save_temporary_search($search);

      // Need to set this for making the pager works.
      $_GET['q'] = APACHESOLR_ANGULARJS_SEARCH_BASE_PATH . '/' . $search->uri;

      $response = new stdClass();
      $response->uri = '/' . APACHESOLR_ANGULARJS_SEARCH_BASE_PATH . '/' . $search->uri;
      $response->aasBaseUrl = APACHESOLR_ANGULARJS_SEARCH_BASE_PATH;
      $response->searchFormPath = variable_get('apachesolr_angularjs_search_search_base_path', '');
      return drupal_json_output($response);
    }
  }
  elseif ($search = apachesolr_angularjs_search_load_search_by_uri($uri)) {
    $query = $search->query;
    $page_id = $search->page_id;
    // 10 seconds as allowed latency.
    if ($search->created == $search->last_run && $search->created + 10 >= REQUEST_TIME) {
      $save_option = TRUE;
    }
    else {
      $save_option = FALSE;
    }

    // Update last_run field.
    $search->last_run = REQUEST_TIME;
    unset($search->groups);
    unset($search->limit_by);
    drupal_write_record('aas_search_saved', $search, 'sid');
    drupal_static('apachesolr_angularjs_search_name', $search->name);
  }
  else {
    // Not valid uri. Search with given string.
    $query = $uri;
  }

  if (empty($page_id)) {
    $page_id = variable_get('apachesolr_angularjs_search_advanced_page', apachesolr_search_default_search_page());
  }

  $sort = isset($_GET['solrsort']) ? $_GET['solrsort'] : '';
  $rows = isset($_GET['items_per_page']) ? $_GET['items_per_page'] : 25;
  $conditions = array(
    'fq' => array(),
    'apachesolr_search_sort' => $sort,
  );
  $page = apachesolr_search_page_load($page_id);
  if ($rows) {
    $page['settings']['apachesolr_search_per_page'] = $rows;
  }
  $build = array();
  $results = apachesolr_search_search_results($query, $conditions, $page);
  $page_results_count = &drupal_static('apachesolr_angularjs_search_page_results_count', 0);
  $page_results_count = count($results);
  if (count($results) === 1 && isset($results['apachesolr_search_browse'])) {
    $page_results_count = 0;
  }
  $search_terms = &drupal_static('apachesolr_angularjs_search_terms', '');
  if ($search) {
    $search_terms = $search->name;
  }
  else {
    $search_terms = $query;
  }
  $build = apachesolr_search_search_page_custom($results, $page, $build);
  if (isset($build['suggestions'])) {
    // Remove suggestions.
    unset($build['suggestions']);
  }

  if ($save_option) {
    $save_form = &drupal_static('apachesolr_angularjs_search_save_form', drupal_get_form('apachesolr_angularjs_search_save_form', $search));
    $build['save_form'] = $save_form;
    $build['save_form']['#weight'] = 0;
  }

  drupal_alter('apachesolr_angularjs_search_build_result', $build);

  return $build;
}

/**
 * Determines whether a search group is empty or not.
 */
function apachesolr_angularjs_search_empty_group($group) {
  foreach ($group['fields'] as $field) {
    if (!empty($field['value'])) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Builds a query string based on search groups.
 */
function apachesolr_angularjs_search_build_query($groups, $limit_by) {
  $query = '';
  foreach ($groups as $group_index => $group) {
    if (!apachesolr_angularjs_search_empty_group($group)) {
      $internal_connector = $group['internalConnector'];
      $next_connector = $group['nextConnector'];
      $query .= '( ';
      $missing_parenthesis = FALSE;
      foreach ($group['fields'] as $field_index => $field) {
        if (!empty($field['value']) || !empty($field['value2'])) {
          $field_connector_added = FALSE;
          if (!$missing_parenthesis) {
            $query .= '( ( ';
            $missing_parenthesis = TRUE;
          }
          $query .= apachesolr_angularjs_search_get_field_query($field);

          if ((!empty($group['fields'][$field_index + 1]['id']) && $group['fields'][$field_index + 1]['id'] !== $field['id']) || (empty($group['fields'][$field_index + 1]['id']) && $missing_parenthesis)) {
            $query .= ' ) )';
            $missing_parenthesis = FALSE;
          }
          elseif (!empty($group['fields'][$field_index + 1]['id']) && $group['fields'][$field_index + 1]['id'] === $field['id']) {
            $query .= ' ) ' . $group['fields'][$field_index + 1]['previousConnector'] . ' (';
            $field_connector_added = TRUE;
          }

          if (!$field_connector_added && isset($group['fields'][$field_index + 1]) && (!empty($group['fields'][$field_index + 1]['value']) || !empty($group['fields'][$field_index + 1]['value2']))) {
            $query .= " $internal_connector";
          }
          $query .= ' ';

        }
      }

      $query .= ")";

      if (isset($groups[$group_index + 1])) {
        $query .= " $next_connector";
        $query .= ' ';
      }
    }
  }

  $limit = '';
  foreach ($limit_by as $field_index => $field) {
    if ($field['type'] != 'group') {
      $result = apachesolr_angularjs_search_get_field_query($field);
      if ($result) {
        $limit .= ' ( ' . $result . ' ) AND ';
      }
    }
    else {
      foreach ($field['fields'] as $group_field) {
        $result = apachesolr_angularjs_search_get_field_query($group_field);
        if ($result) {
          $limit .= ' ( ' . $result . ' ) AND ';
        }
      }
    }
  }

  $limit = substr($limit, 0, -4);

  if (trim($limit)) {
    $query .= ' AND ( ' . $limit . ' )';
  }

  return $query;
}

/**
 * Create query string for a given field.
 */
function apachesolr_angularjs_search_get_field_query($field) {
  $query = '';
  if ($field['id'] != '__fulltext_search' && (!empty($field['value']) || !empty($field['value2'])) && $field['type'] != 'group') {
    // No fulltext, no field with 2 values; no group.
    $query .= $field['id'] . ':';
  }
  if (empty($field['format']) && empty($field['autocompletePath']) && !empty($field['value']) && $field['type'] !== 'options') {
    // No field with value2, no autocomplete.
    $value_connector = '';
    $values = apachesolr_angularjs_search_get_field_values($field['value'], $value_connector);
    $query .= $values[0];

    // Discard first value because we already used it.
    array_shift($values);
    if (!empty($values)) {
      foreach ($values as $index => $value) {
        $query .= ' ' . $value_connector . ' ';
        $query .= $field['id'] . ':' . $value;
      }
    }
  }
  elseif (!empty($field['autocompletePath']) && !empty($field['value'])) {
    // Autocomplete field.
    $value_connector = '';
    $values = apachesolr_angularjs_search_get_autocomplete_field_values($field['value'], $value_connector);
    if (!$value_connector) {
      $value_connector = 'AND';
    }
    $query .= $values[0];

    // Discard first value because we already used it.
    array_shift($values);
    if (!empty($values)) {
      foreach ($values as $index => $value) {
        $query .= ' ' . $value_connector . ' ';
        $query .= $field['id'] . ':' . $value;
      }
    }
  }
  elseif (!empty($field['format']) && $field['format'] === 'fromto' && (!empty($field['value']) || !empty($field['value2']))) {
    // Field with 2 values.
    $left_limit = '';
    $right_limit = '';
    if ($field['type'] === 'dateYear') {
      $left_limit = !empty($field['value']) ? $field['value'] . '-01-01T00:00:00.000Z' : '*';
      $right_limit = !empty($field['value2']) ? $field['value2'] . '-12-31T23:59:59.999Z' : '*';
    }
    else {
      $left_limit = !empty($field['value']) ? $field['value'] : '*';
      $right_limit = !empty($field['value2']) ? $field['value2'] : '*';
    }
    $query .= '[' . $left_limit . ' TO ' . $right_limit . ']';
  }
  elseif ($field['type'] === 'options' && !empty($field['value'])) {
    $query .= array_shift($field['value']);
    foreach ($field['value'] as $value) {
      $query .= ' OR ';
      $query .= $field['id'] . ':' . $value;
    }
  }

  return trim($query);
}

/**
 * Get a list of values for a given field.
 */
function apachesolr_angularjs_search_get_field_values($value, &$value_connector = '', $values = array()) {
  $pattern = '/^(.*)\sAND\s(.*)|^(.*)\sOR\s(.*)|^(.*)\sNOT\s(.*)/';
  $matches = array();
  if (preg_match($pattern, $value, $matches) == 0) {
    $values[] = $value;
    return array_reverse($values);
  }
  else {
    if (!$value_connector) {
      if (!empty($matches[1])) {
        $value_connector = 'AND';
      }
      elseif (!empty($matches[3])) {
        $value_connector = 'OR';
      }
      elseif (!empty($matches[5])) {
        $value_connector = 'NOT';
      }
    }
    $values[] = end($matches);
    $value = $matches[count($matches) - 2];
    return apachesolr_angularjs_search_get_field_values($value, $value_connector, $values);
  }
}

/**
 * Get a list of values for a given autocomplete field.
 */
function apachesolr_angularjs_search_get_autocomplete_field_values($value, &$value_connector = '', $values = array()) {
  $operators = array('AND', 'OR', 'NOT');
  foreach ($value as $element) {
    if (is_numeric($element['id'])) {
      $values[] = $element['id'];
    }
    elseif (!$value_connector && (strpos($element['id'], 'AND') === 0 || strpos($element['id'], 'OR') === 0 || strpos($element['id'], 'NOT') === 0)) {
      $value_connector = substr($element['id'], 0, 3);
    }
  }
  return $values;
}

/**
 * Returns save form for a given search.
 */
function apachesolr_angularjs_search_save_form($form, $form_state, $search) {
  $form['#prefix'] = '<div class="aas-save-search-form">';
  $form['#suffix'] = '</div>';
  $form['search'] = array(
    '#type' => 'value',
    '#value' => $search,
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#weight' => 1,
    '#attributes' => array(
      'class' => array('aas-save-search-form--name')
    ),
  );

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 2,
    '#ajax' => array(
      'callback' => 'apachesolr_angularjs_search_save_search',
      'method' => 'replace',
      'effect' => 'fade',
      'wrapper' => 'apachesolr-angularjs-search-save-form',
    ),
    '#attributes' => array(
      'class' => array('aas-save-search-form--submit')
    ),
  );

  return $form;
}

/**
 * Save Search and return success text.
 */
function apachesolr_angularjs_search_save_search($form, $form_state) {
  $values = $form_state['values'];
  $name = $values['name'];
  $search = $values['search'];
  $search->name = $name;
  $search->status = APACHESOLR_ANGULARJS_SEARCH_PERMANENT;
  $result = drupal_write_record('aas_search_saved', $search, 'sid');
  if ($result === SAVED_UPDATED) {
    global $base_url;
    return t('Your search has been saved. You may access and share this saved search !link.',
      array(
        '!link' => l(t('here'), variable_get('apachesolr_angularjs_search_search_base_path', APACHESOLR_ANGULARJS_SEARCH_BASE_PATH) . '/' . $search->uri)));
  }
  else {
    return t('There was an error saving your search.');
  }
}

/**
 * Returns a search searching by given uri.
 */
function apachesolr_angularjs_search_load_search_by_uri($uri) {
  $query = db_query('SELECT sid, uri, name, created, last_run, uid, page_id, status, groups, limit_by, query FROM {aas_search_saved} WHERE uri = :uri', array(':uri' => $uri));
  $search = $query->fetchObject();
  if ($search) {
    return $search;
  }

  return FALSE;
}

/**
 * Returns a search group by given sgid.
 */
function apachesolr_angularjs_search_group_load($sgid) {
  $query = db_query('SELECT sgid, name, created, last_used, uid, data FROM {aas_search_saved_groups} WHERE sgid = :sgid', array(':sgid' => $sgid));
  $group = $query->fetchObject();
  if ($group) {
    return $group;
  }

  return FALSE;
}

/**
 * Save temporary search.
 */
function apachesolr_angularjs_search_save_temporary_search(&$search) {
  if (empty($search->uid)) {
    global $user;
    $search->uid = $user->uid;
  }
  if ($search->uid === 0) {
    // If anonymous user; set session_id.
    $_SESSION['save'] = TRUE;
    $session_id = session_id();
    $search->session_id = $session_id;
  }
  if (empty($search->created)) {
    $search->created = REQUEST_TIME;
  }
  if (empty($search->last_run)) {
    $search->last_run = REQUEST_TIME;
  }
  if (empty($search->uri)) {
    $search->uri = apachesolr_angularjs_search_get_search_uri($search);
  }
  if (empty($search->name)) {
    $search->name = apachesolr_angularjs_search_get_search_name($search->groups);
  }
  module_invoke_all('apachesolr_angularjs_search_search_presave', $search);
  return drupal_write_record('aas_search_saved', $search);
}

/**
 * Return search uri for a given search.
 */
function apachesolr_angularjs_search_get_search_uri($search, $count = 0) {
  global $drupal_hash_salt;
  $string = $search->uid . '|' . $search->created . '|' . $search->query . '|' . $count;
  $uri = drupal_hmac_base64($string, $drupal_hash_salt);
  // Remove -- because of unexpected results.
  $uri = str_replace('--', '', $uri);

  $uri = substr($uri, 0, 20);
  if (apachesolr_angular_js_search_uri_exists($uri)) {
    return apachesolr_angularjs_search_get_search_uri($search, $count + 1);
  }
  else {
    return $uri;
  }
}

/**
 * Returns whether a given uri already exists or not in saved searches table.
 */
function apachesolr_angular_js_search_uri_exists($uri) {
  $query = db_query('SELECT count(sid) FROM {aas_search_saved} WHERE uri = :uri', array(':uri' => $uri));
  $count = $query->fetchField();
  if ($count) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Return delete form for a given sid.
 */
function apachesolr_angularjs_search_delete_form($form, $form_state, $sid, $delete_text) {
  $form['sid'] = array(
    '#type' => 'value',
    '#value' => $sid,
  );

  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => check_plain($delete_text),
  );

  return $form;
}

/**
 * Return delete form for a given sgid.
 */
function apachesolr_angularjs_search_group_delete_form($form, $form_state, $sgid, $delete_text) {
  $form['sgid'] = array(
    '#type' => 'value',
    '#value' => $sgid,
  );

  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => check_plain($delete_text),
  );

  return $form;
}

/**
 * Submit handler for apachesolr_angularjs_search_delete_form.
 */
function apachesolr_angularjs_search_delete_form_submit($form, $form_state) {
  $sid = $form_state['values']['sid'];
  db_delete('aas_search_saved')
    ->condition('sid', $sid)
    ->execute();
}

/**
 * Submit handler for apachesolr_angularjs_search_group_delete_form.
 */
function apachesolr_angularjs_search_group_delete_form_submit($form, $form_state) {
  $sgid = $form_state['values']['sgid'];
  db_delete('aas_search_saved_groups')
    ->condition('sgid', $sgid)
    ->execute();
}

/**
 * Form builder for apachesolr_angularjs_search_admin_form.
 */
function apachesolr_angularjs_search_admin_form($form, $form_state) {
  $form['apachesolr_angularjs_search_delete_time'] = array(
    '#title' => t('Delete time'),
    '#type' => 'textfield',
    '#description' => t('Allowed time to live for a temporary search (in seconds).'),
    '#default_value' => variable_get('apachesolr_angularjs_search_delete_time', 86400),
    '#required' => TRUE,
  );

  $form['apachesolr_angularjs_search_search_base_path'] = array(
    '#title' => t('Search Base Path'),
    '#type' => 'textfield',
    '#description' => t('Base path for saved/history searches. They would be {base path}/[uri]'),
    '#default_value' => variable_get('apachesolr_angularjs_search_search_base_path', APACHESOLR_ANGULARJS_SEARCH_BASE_PATH),
    '#required' => TRUE,
  );

  $help_tips = variable_get('apachesolr_angularjs_search_help_tips', array());
  $form['apachesolr_angularjs_search_help_tips'] = array(
    '#title' => t('Help Tips'),
    '#type' => 'text_format',
    '#description' => t('Search Help Tips'),
    '#format' => !empty($help_tips['format']) ? $help_tips['format'] : NULL,
    '#default_value' => !empty($help_tips['value']) ? $help_tips['value'] : '',
  );

  return system_settings_form($form);
}
